#!/usr/bin/env node

/**
 * Module dependencies.
 *
 */

const debug = require('debug')('demo:server');
const http = require('http');
const os = require('os');


const envSet = new Set(['develop', 'production']);
function getEnv() {
    let env = process.env.NODE_ENV;
    if (env && envSet.has(env)) return env;
    return 'develop';
}

global.NODE_ENV = getEnv();


// 加载log4js
const log4js = require('log4js');
const log4jsConfig = require('../config/log4js.js');
global.getLogger = log4js.getLogger;
const logger = getLogger();

// 定义全局变量
let serviceConfig = require('../config/service.js');
log4js.configure(log4jsConfig);
global.getServiceConfig = () => {
    return serviceConfig;
};
const routerListeners = {
    onGraphqlInit: function () {

    },
    onGraphqlAddService: function () {

    },
    onGraphqlAddNode: function () {

    }

};
global.getZKInfo = function () {
    return routerListeners;
};
global.setListenerRouter = function (o) {
    routerListeners.onGraphqlInit = o.onGraphqlInit;
    routerListeners.onGraphqlAddService = o.onGraphqlAddService;
    routerListeners.onGraphqlAddNode = o.onGraphqlAddNode;
};
global.ZKInfo= {
    graphql:{

    },
    restful: {

    }
};
const app = require('../app');

// 连接zookeeper
const {CuratorFrameworkFactory, getNodesInfo} = require('zk-curator');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(serviceConfig.web.port || '3001');
// app.set('port', port);

/**
 * Create HTTP server.
 */
let server;


/**
 * zookeeper start
 */
let client;
client = CuratorFrameworkFactory.builder()
.connectString(serviceConfig.zk.url)
.setLogger(getLogger('zookeeper'))
.build(main);
client.start();
/**
 * 检查配置
 * @param old
 * @return {{}}
 */
const nodeConfig = (old) => {
    try {
        old = JSON.parse(old);
        const n = {};
        n.user = {};
        if (typeof old.user === 'object') {
            for (const key in old.user) {
                const NC = {};
                const current = old.user[key];
                if ('deep' in current && typeof current.deep === 'number') NC.deep = current.deep;
                if ('concurrency' in current && typeof current.concurrency === 'number') NC.concurrency = current.concurrency;
                n.user[key] = NC;
            }
        }
        return n;
    } catch (e) {
        return false;
    }
};


async function main() {
    try {

        // 获取graphql所有子节点
        let parentPath = serviceConfig.graphql.path_dir;

        const info = await getNodesInfo({
            path:parentPath,
            client: client
        });
        routerListeners.onGraphqlInit(info);
        ZKInfo.graphql = info;
        logger.info(JSON.stringify(info));
        // 获取restful所有子节点

        server = http.createServer(app.callback());
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    } catch (e) {
        logger.error(e);
        process.exit();
    }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    logger.info(`listener:${port}`);
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

process.on('exit',function(code){
    client.close(); // 释放zookeeper连接
    logger.info('zookeeper session close!');
    if (code === 1000) {
        logger.error('process:uncaughtException');
    }else if (code === 1001) {
        logger.error('process:SIGINT');
    } else {
        logger.error('process:unknown');
    }
});
process.on('uncaughtException',function(){
    process.exit(1000);
});
process.on('SIGINT',function () {
    process.exit(1001);
});
process.on('SIGKILL',function () {
    process.exit(1002);
});